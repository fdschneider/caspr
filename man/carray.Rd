% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/carray.R
\name{carray}
\alias{carray}
\title{Run ca() over parameter array.}
\usage{
carray(model, init, parms = model$parms, save = FALSE, filename = "sim",
  directory = getwd(), width = 50, height = width, salt = 345678, ...)
}
\arguments{
\item{model}{A valid object of class 'ca_model'. Defaults to musselbed. Valid
values are: \code{musselbed}, \code{grazing}.}

\item{init}{A valid numerical vector of initial cover. Length must be equal
to \code{length(model$states)}.}

\item{parms}{A list of parameters with one or several parameters containing a
vector of parameter values. Those will be combined full-factorially using
\code{expand.grid()}}

\item{save}{Logical. If TRUE, each individual run is saved to a file. They
can be loaded into the current working environment using
\code{load("filename")}.}

\item{filename}{A character vector specifying the root of the filename of the
saved files, including a relative path. It will be extended by an
individual iteration ID and the fileending ".Rd". Note: If running in
parallel on a cluster, output files will be saved in the workers home
directory!}

\item{width}{An integer number. Defaults to 50 and is ignored if a landscape
object is provided in \code{init}.}

\item{height}{An integer number. Defaults to 50 or to \code{width} if
provided and is ignored if a landscape object is provided in \code{init}.}

\item{salt}{An integer number. Used as seed when generating seeds for each
single simulation run. Those generated seeds are returned in the output of
the function.}

\item{...}{parameters handed over to function \code{ca()}.}
}
\value{
Returns a dataframe with global and local cover for each state for
  each parameter value or combination of parameter values given in
  \code{parms}.
}
\description{
Run ca() over parameter array.
}
\details{
The function is used to create gradients along one parameter value
  or an array of parameter values. It runs the simulation for each parameter
  value or combination of parameter values while making use of a parallel
  backend provided by \code{\link[foreach]{foreach}}.
}
\examples{
\dontrun{
  p <- list(
    r = 0.4, # recolonisation of empty sites dependent on local density
    d = seq(0,1,0.1), # wave disturbance
    delta = 0.01, # intrinsic disturbance rate
    replicates = 1:2  # repeat the same parameter set twice
  )

# provides parallel backend
 library(foreach)
 library(doSNOW)

 workerlist <- c(rep("localhost", times = 7)) #adjust to your computers' capacities

 cl <- makeSOCKcluster(workerlist, outfile='out_messages.txt')

 registerDoSNOW(cl)

 musselgradient <- carray(musselbed, parms = p, init = c(0.6,0.2,0.2), t_max = 400, save = TRUE, file = "out/musselbed")

 stopCluster(cl)

 musselgradient
 plot(musselgradient[,"mean_cover.+"] ~ musselgradient$d, pch = 20)
}
}

